@page "/s"

<PageTitle>Мониторинг</PageTitle>

@using Microsoft.EntityFrameworkCore;
@using Stationar.Domen.Models;
@inject StationarContext db


<h3>Мониторинг состояния стационара по коечному фонду</h3>


@if(rooms == null)
{
    <h3> Загрузка комнатs...</h3>
}
else





    @foreach(var r in rooms)
        {
            <div class="room container border border-3 border-primary">

                    Номер палаты: @r.Number

                    @foreach (var p in r.Places)
                    {

                    <div class="container border border-2 border-warning" draggable="true" @ondragstart="(e) => HandleDragStart(e,p)"
                                                                                           @ondrop="(e) => HandleDrop(e,p)"
                                                                                           ondragover="event.preventDefault();">
                        @if(p.Patient != null)
                        {
                            <div> Место: @p.Id</div>
                            <h3> Пациент: @p.Patient.Name</h3>
                        }
                        else
                        {
                            <div> Место: @p.Id</div>
                            <h3>Место свободно </h3>
                        }

                    </div>

                    }

            </div>
        }



@code {

    Place currentTargetPlace;

    IEnumerable<Room> rooms = new List<Room>();

    protected override async Task OnInitializedAsync()
    {

        rooms = await db.Rooms.Include(r => r.Places).ThenInclude(p => p.Patient).ToListAsync();
        
    }


    private async Task HandleDragStart(DragEventArgs e,Place p)
    {
        // перемещаем, если место не пустое

        if(p.Patient != null)
        {
            Console.Out.WriteLine($"Передан объект: {p.Patient.Name}"); 
            currentTargetPlace = p;

        }
        else
        {
            Console.Out.WriteLine($"Передан объект: пустое место. Нельзя перемещать пустое место!");
        }

    }


    private void HandleDrop(DragEventArgs e,Place p)
    {

        if(p.Patient != null)
        {
            Console.WriteLine($"Целевой объект: {p.Patient.Name} уже занимает это место!");
            return;
        }
        else
        {
            Console.WriteLine($"Целевой объект: пустое место");

            // обновляем пациента для нового места
            p.PatientId = currentTargetPlace.PatientId;


            // старое место пациента освобождаем
            currentTargetPlace.PatientId = null;


            try
            {
                db.Places.Update(p);
                db.Places.Update(currentTargetPlace);
                db.SaveChanges();
                Console.WriteLine("Операции успешно завершены!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.InnerException.Message}");
            }

        }

    }

    // private void HandleDragLeave()
    // {
    //     currentTargetPlace = null;
    // }

}
